✅ Simple Command & global
OK - Execute a simple command with an absolute path like /bin/ls or any other command without options
OK - How many global variable ? why ? concrete example of why it feels mandatory or logical.
V Yes
  No
✅ Arguments
OK - Execute a simple command with an absolute path like /bin/ls or any other command with arguments but without quotes and double quotes
OK - Repeat multiple times with different commands and arguments
V Yes
  No
✅ echo
OK - Execute the echo command with or without arguments or options
OK - Repeat multiple times with different arguments
V Yes
  No
✅ exit
OK - Execute exit command with or without arguments
OK - Repeat multiple times with different arguments
OK - Don't forget to relaunch the minishell
V Yes
  No
❌ Return value of a process
- Execute a simple command with absolute path like /bin/ls or any other command with arguments but without quotes and double quotes then execute echo $?
- Check the printed value. You can repeat the same in bash and compare it.
- Repeat multiple times with different commands and arguments, use some failing commands like '/bin/ls filethatdoesntexist'
 Yes
 No
✅ Semicolons
OK - Execute multiple simple commands with absolute path with arguments but separate them with semicolons
OK - Repeat multiple times with different commands and don't forget to try with or without whitespaces around the semicolons
V Yes
  No
✅ Signals
OK - Try ctrl-C in an empty prompt
OK - Try ctrl-\ in an empty prompt
OK - Try ctrl-D in an empty prompt
OK - Try ctrl-C in a prompt after you wrote some stuff
OK - Try ctrl-D in a prompt after you wrote some stuff
OK - Try ctrl-\ in a prompt after you wrote some stuff
OK - Try ctrl-C after running a blocking command like cat or grep without arguments
OK - Try ctrl-\ after running a blocking command like cat or grep without arguments
OK - Try ctrl-D after running a blocking command like cat or grep without arguments
OK - Repeat multiple times with different commands
V Yes
  No
✅ Double Quotes
OK - Execute a simple command with absolute path with arguments but this time double quotes (you should include whitespaces and semicolons in the quotes)
OK - Think about empty arguments or a weird use of '\'
OK - Do not try multiline strings
V Yes
  No
✅ env
OK - Check if env shows you the current environment variables
V Yes
  No
✅ export
OK - Export environment variables, create new ones and replace old ones
OK - Check them with env
V Yes
  No
✅ unset
OK - Export environment variables, create new ones and replace old ones
OK - Use unset to remove some of them
OK - Check the result with env
V Yes
  No
✅ Environment Variables
OK - Execute echo with some $ variables as arguments
OK - Check if double quotes around $ variables is working correctly (like in bash)
V Yes
  No
✅ cd
OK - Use the command cd to move the working directory and check if you are in the right directory with /bin/ls
OK - Repeat multiple times with working and not working cd
OK - try '.' '..' as arguments too
V Yes
  No
✅ pwd
OK - Use the command pwd
OK - Repeat multiple times in multiple directories
V Yes
  No
✅ Relative Path
OK - Execute commands but this time use a relative path
OK - Repeat multiple times in multiple directories with complex relative path (lots of ..)
V Yes
  No
✅ Environment Path
Ok - Execute commands but this time without any path. (ls, wc, awk etc...)
OK - Unset the $PATH and check if it is not working anymore
OK - Set the $PATH to a multiple directory value (directory1:directory2) and check that directories are checked in order from left to right
 Yes
 No
✅ Simple Quotes
OK - Execute commands with simple quotes as argument
OK - Try empty arguments
OK - Try environment variables, whitespaces and semicolons in the simple quotes
V Yes
  No
❌ Redirection
- Execute commands with redirections < and/or >
- Repeat multiple times with different commands and arguments and sometimes change > with >>
- Check if multiple of the same redirections fail
 Yes
 No
❌✅ Pipes
OK - Execute commands with pipes like 'cat file | grep bla | more'
OK - Repeat multiple times with different commands and arguments
OK - Try some failing commands like 'ls filethatdoesntexist | grep bla | more'
- Try to mix pipes and redirections.
 Yes
 No
✅ Go Crazy and history
OK - Can we navigate through history with up and down and retry some command
OK - Execute commands that should not work like 'dsbksdgbksdghsd' and check if the shell doesn't crash and prints an error
OK - Try to execute a really really really long command with a ton of arguments
OK - Have fun with that beautiful minishell and enjoy it
V Yes
  No


Bonus
We will look at your bonuses if and only if your mandatory part is excellent. This means that you must complete the mandatory part, beginning to end, and your error management must be flawless, even in cases of twisted or bad usage. So if you didn't score all the points on the mandatory part during this defence bonuses will be totally ignored.
double left redirection
- Check if << is working fine
 Yes
 No
Line editing
OK - Can we move the cursor left and right and edit the line by inserting or deleting characters at cursor location
- Can we copy paste all/part of a line using a key sequence
OK - Can we move word by word with ctrl+left or ctrl+right
OK - Go directly to the beginning or the end of the line with home or end
- Write and edit commands with multilines
Rate it from 0 (failed) through 5 (excellent)
And, Or
- Use &&, || and parenthesis with commands and check if it works like bash
- For each working flag give 1 point
- If all flags are working give 1 bonus point
Rate it from 0 (failed) through 5 (excellent)
WildCard
- Use wildcards in arguments
- Try things like */*
- Go crazy with wildcards
